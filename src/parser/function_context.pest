wrapped_function_context = _{ SOI ~ function_context ~ EOI }

// the comment and whitespace things here will be implied when
// using this in another rule, but they aren't when using it standalone,
// i.e. in tests.
code_block = { "{" ~ function_context ~ "}" }
function_context = _{ (COMMENT | WHITESPACE)* ~ (statement)* ~ (COMMENT | WHITESPACE)*}

literal = _{ bool_true | bool_false | char_literal | string_literal | float | integer }

bool_true = @{ "true" }
bool_false = @{ "false" }

char_literal = ${ "'" ~ character ~ "'"}
character = @{
    !("\'" | "\\") ~ ANY
    | "\\" ~ ("\'" | "\\" | "n" | "r" | "t" | ("u" ~ "{" ~ ASCII_HEX_DIGIT{4} ~ "}" ))
}

int_digit = _{ ASCII_DIGIT | "_" }
integer = @{ ASCII_NONZERO_DIGIT ~ int_digit* | int_digit }
float = @{
    integer ~ (
        float_fractional_part ~ float_exponent_part?
        | float_exponent_part
    )
}

float_fractional_part = _{ "." ~ int_digit* }
float_exponent_part = _{ ^"e" ~ ("+" | "-")? ~ integer }

string_literal = ${ "\"" ~ string_literal_inner ~ "\"" }
string_literal_inner = @{ string_literal_char* }
string_literal_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ "{" ~ ASCII_HEX_DIGIT{4} ~ "}")
}

primary = _{ literal | identifier | "(" ~ expression ~ ")" }

prefix = _{ unary_minus | not }
    unary_minus = { "-" }
    not = { "!" }
atom = _{ prefix? ~ primary ~ function_call* }

operator = _{
    add | subtract | multiply | divide | remainder
    | and | or
    | less_than_equals | less_than | greater_than_equals | greater_than
    | equals | not_equals
}
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }
    remainder = { "%" }
    and = { "&&" }
    or = { "||" }
    less_than = { "<" }
    less_than_equals = { "<=" }
    greater_than = { ">" }
    greater_than_equals = { ">=" }
    equals = { "==" }
    not_equals = { "!=" }

function_call = { "(" ~ function_call_arguments ~  ")"}
function_call_arguments = _{ (expression ~ ",")* ~ expression? }

statement = _{
    let_statement ~ ";"
    | if_else_block
    | while_block
    | for_each_loop
    | expression ~ ";"
}

let_statement = { "let" ~ identifier ~ type_hint? ~ "=" ~ expression }

assignment = { identifier ~ "=" ~ expression }

expression = {
    if_else_block
    | assignment
    | operator_expression
}

operator_expression = { atom ~ (operator ~ atom)* }

if_else_block = {
    if_block
    ~ else_if_chain*
    ~ else_block?
}

if_block = _{ "if" ~ expression ~ code_block }
else_if_chain = { "else" ~ "if" ~ expression ~ code_block }
else_block = { "else" ~ code_block }

while_block = { "while" ~ expression ~ code_block }

for_each_loop = { "for" ~ identifier ~ "in" ~ expression ~ code_block }
